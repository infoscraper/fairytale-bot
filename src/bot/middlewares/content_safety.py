"""Content Safety Middleware - –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
import logging
from typing import Callable, Dict, Any, Awaitable
from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, TelegramObject

from ...services.content_safety_service import content_safety, SafetyLevel

logger = logging.getLogger(__name__)


class ContentSafetyMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
        """
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if isinstance(event, Message) and event.text:
            user_data = data.get('current_user')
            if not user_data:
                return await handler(event, data)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–µ—Ç—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            child_service = data.get('child_service')
            if not child_service:
                return await handler(event, data)
            
            children = await child_service.get_user_children(user_data.id)
            if not children:
                return await handler(event, data)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            text = event.text.strip()
            
            for child in children:
                safety_level, violations = content_safety.validate_input(text, child.age)
                
                if safety_level == SafetyLevel.BLOCKED:
                    logger.warning(f"Blocked content from user {user_data.id}: {text[:50]}...")
                    
                    await event.answer(
                        "üö´ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –¥–µ—Ç–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã.\n\n"
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –¥–æ–±—Ä—ã–µ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ç–µ–º—ã –¥–ª—è —Å–∫–∞–∑–æ–∫.",
                        show_alert=True
                    )
                    return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            
            # –î–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –Ω–æ —Ä–∞–∑—Ä–µ—à–∞–µ–º
            if safety_level == SafetyLevel.WARNING:
                logger.info(f"Warning content from user {user_data.id}: {text[:50]}...")
                
                await event.answer(
                    "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–∞ —Ç–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–ª–æ–∂–Ω–æ–π –¥–ª—è –¥–µ—Ç–µ–π –º–ª–∞–¥—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞.\n"
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–∫–∞–∑–∫–∞ –±—É–¥–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞.",
                    show_alert=True
                )
        
        return await handler(event, data)


class ThemeValidationMiddleware(BaseMiddleware):
    """Middleware –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–µ–º —Å–∫–∞–∑–æ–∫"""
    
    async def __call__(
        self,
        handler: Callable[[TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: TelegramObject,
        data: Dict[str, Any]
    ) -> Any:
        """
        –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º —Å–∫–∞–∑–æ–∫
        """
        
        if isinstance(event, CallbackQuery) and event.data:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º callback —Å —Ç–µ–º–æ–π
            if event.data.startswith("theme_"):
                user_data = data.get('current_user')
                if not user_data:
                    return await handler(event, data)
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ callback
                theme = event.data.split("_", 1)[1]
                if theme == "random":
                    return await handler(event, data)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ä–µ–±–µ–Ω–∫–µ
                child_service = data.get('child_service')
                if not child_service:
                    return await handler(event, data)
                
                # –ù—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å ID —Ä–µ–±–µ–Ω–∫–∞ –∏–∑ callback –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
                # –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                children = await child_service.get_user_children(user_data.id)
                
                for child in children:
                    safety_level, message = content_safety.validate_theme(theme, child.age)
                    
                    if safety_level == SafetyLevel.BLOCKED:
                        logger.warning(f"Blocked theme '{theme}' for child {child.id}")
                        
                        await event.answer(
                            f"üö´ {message}\n\n"
                            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.",
                            show_alert=True
                        )
                        return  # –ë–ª–æ–∫–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
                    
                    elif safety_level == SafetyLevel.WARNING:
                        logger.info(f"Warning theme '{theme}' for child {child.id}")
                        
                        await event.answer(
                            f"‚ö†Ô∏è {message}\n\n"
                            f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —ç—Ç–æ–π —Ç–µ–º–æ–π?",
                            show_alert=True
                        )
        
        return await handler(event, data)
