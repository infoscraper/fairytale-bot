"""Handlers for story history management"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile, BufferedInputFile
from aiogram.filters import Command
from sqlalchemy.ext.asyncio import AsyncSession
from typing import List
import io

from ..keyboards.inline import get_history_keyboard, get_story_actions_keyboard, get_children_filter_keyboard
from ...services.story_service import StoryService
from ...services.child_service import ChildService
from ...models import User, Story

router = Router()


@router.message(Command("history"))
async def history_command(
    message: Message,
    session: AsyncSession,
    current_user: User
):
    """Show user's story history"""
    story_service = StoryService(session)
    child_service = ChildService(session)
    
    # Get all user stories (recent first)
    stories = await story_service.get_user_stories(current_user.id, limit=20)
    children = await child_service.get_user_children(current_user.id)
    
    if not stories:
        await message.answer(
            "üìö **–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–∑–æ–∫**\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–∫–∞–∑–∫—É –∫–æ–º–∞–Ω–¥–æ–π /story! ‚ú®"
        )
        return
    
    # Create history message
    history_text = f"üìö **–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–∑–æ–∫**\n\n"
    history_text += f"–í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫: {len(stories)}\n"
    history_text += f"–î–ª—è –¥–µ—Ç–µ–π: {len(children)}\n\n"
    
    # Show recent stories (last 5)
    history_text += "üî• **–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–∫–∞–∑–∫–∏:**\n"
    for i, story in enumerate(stories[:5], 1):
        feedback_emoji = "üíñ" if story.child_feedback == "loved" else "üëç" if story.child_feedback == "liked" else "üìñ"
        date_str = story.created_at.strftime("%d.%m")
        history_text += f"{i}. {feedback_emoji} {story.child_name} ‚Ä¢ {story.theme} ‚Ä¢ {date_str}\n"
    
    if len(stories) > 5:
        history_text += f"\n... –∏ –µ—â–µ {len(stories) - 5} —Å–∫–∞–∑–æ–∫"
    
    keyboard = get_history_keyboard(len(children) > 1)
    await message.answer(history_text, reply_markup=keyboard)


@router.callback_query(F.data == "view_all_stories")
async def view_all_stories(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Show all user stories with pagination"""
    story_service = StoryService(session)
    stories = await story_service.get_user_stories(current_user.id, limit=50)
    
    if not stories:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç —Å–∫–∞–∑–æ–∫", show_alert=True)
        return
    
    # Create detailed stories list
    stories_text = f"üìñ **–í—Å–µ —Å–∫–∞–∑–∫–∏ ({len(stories)})**\n\n"
    
    for i, story in enumerate(stories, 1):
        feedback_emoji = get_feedback_emoji(story.child_feedback)
        date_str = story.created_at.strftime("%d.%m.%Y")
        generation_time = f" ({story.generation_time}s)" if story.generation_time else ""
        
        stories_text += (
            f"{i}. {feedback_emoji} **{story.child_name}** ({story.child_age} –ª–µ—Ç)\n"
            f"   üéØ {story.theme} ‚Ä¢ üìÖ {date_str}{generation_time}\n"
            f"   üìù {len(story.story_text)} —Å–∏–º–≤–æ–ª–æ–≤\n\n"
        )
        
        # Split into pages if too long
        if len(stories_text) > 3500:
            stories_text += f"... –∏ –µ—â–µ {len(stories) - i} —Å–∫–∞–∑–æ–∫\n\n"
            stories_text += "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            break
    
    keyboard = get_history_keyboard(len(await ChildService(session).get_user_children(current_user.id)) > 1)
    await callback.message.edit_text(stories_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "filter_by_child")
async def filter_by_child(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Show children filter options"""
    child_service = ChildService(session)
    children = await child_service.get_user_children(current_user.id)
    
    if len(children) <= 1:
        await callback.answer("–£ –≤–∞—Å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–µ–±–µ–Ω–æ–∫", show_alert=True)
        return
    
    keyboard = get_children_filter_keyboard(children)
    await callback.message.edit_text(
        "üë∂ **–§–∏–ª—å—Ç—Ä –ø–æ –¥–µ—Ç—è–º**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –µ–≥–æ —Å–∫–∞–∑–æ–∫:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("child_stories_"))
async def show_child_stories(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Show stories for specific child"""
    child_id = int(callback.data.split("_")[2])
    
    story_service = StoryService(session)
    child_service = ChildService(session)
    
    # Get child and their stories
    child = await child_service.get_child_by_id(child_id)
    if not child or child.user_id != current_user.id:
        await callback.answer("–†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    child_stories = await story_service.get_child_stories(child_id, limit=20)
    
    if not child_stories:
        await callback.message.edit_text(
            f"üìö **–°–∫–∞–∑–∫–∏ –¥–ª—è {child.name}**\n\n"
            f"–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–∫–∞–∑–æ–∫ –¥–ª—è {child.name}.\n"
            "–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é —Å–∫–∞–∑–∫—É –∫–æ–º–∞–Ω–¥–æ–π /story! ‚ú®"
        )
        return
    
    # Create child-specific stories list
    stories_text = f"üìö **–°–∫–∞–∑–∫–∏ –¥–ª—è {child.name}** ({child.age} –ª–µ—Ç)\n\n"
    stories_text += f"–í—Å–µ–≥–æ —Å–∫–∞–∑–æ–∫: {len(child_stories)}\n\n"
    
    for i, story in enumerate(child_stories, 1):
        feedback_emoji = get_feedback_emoji(story.child_feedback)
        date_str = story.created_at.strftime("%d.%m.%Y")
        
        stories_text += (
            f"{i}. {feedback_emoji} **{story.theme}**\n"
            f"   üìÖ {date_str} ‚Ä¢ üìù {len(story.story_text)} —Å–∏–º–≤–æ–ª–æ–≤\n"
            f"   üí≠ {story.moral[:50]}...\n\n"
        )
        
        if len(stories_text) > 3500:
            stories_text += f"... –∏ –µ—â–µ {len(child_stories) - i} —Å–∫–∞–∑–æ–∫"
            break
    
    keyboard = get_history_keyboard(True)  # Show all filters
    await callback.message.edit_text(stories_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("read_story_"))
async def read_story_again(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Show specific story for re-reading"""
    story_id = int(callback.data.split("_")[2])
    
    story_service = StoryService(session)
    story = await story_service.get_story_by_id(story_id)
    
    if not story or story.user_id != current_user.id:
        await callback.answer("–°–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # Format story for display
    feedback_emoji = get_feedback_emoji(story.child_feedback)
    date_str = story.created_at.strftime("%d.%m.%Y –≤ %H:%M")
    
    story_text = (
        f"üìñ **–°–∫–∞–∑–∫–∞ –¥–ª—è {story.child_name}** {feedback_emoji}\n\n"
        f"üéØ **–¢–µ–º–∞:** {story.theme}\n"
        f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:** {', '.join(story.characters[:3])}\n"
        f"üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {date_str}\n"
        f"üí´ **–ú–æ—Ä–∞–ª—å:** {story.moral}\n\n"
        f"{'='*30}\n\n"
        f"{story.story_text}\n\n"
        f"{'='*30}"
    )
    
    keyboard = get_story_actions_keyboard(story.id, story.child_id)
    await callback.message.edit_text(story_text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "back_to_history")
async def back_to_history(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Return to main history view"""
    # Re-run the main history command logic
    await history_command(callback.message, session, current_user)
    await callback.answer()


@router.callback_query(F.data.startswith("export_story_"))
async def export_story_to_file(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Export story to text file"""
    story_id = int(callback.data.split("_")[2])
    
    story_service = StoryService(session)
    story = await story_service.get_story_by_id(story_id)
    
    if not story or story.user_id != current_user.id:
        await callback.answer("–°–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # Create story file content
    date_str = story.created_at.strftime("%d.%m.%Y –≤ %H:%M")
    
    file_content = f"""–°–ö–ê–ó–ö–ê –î–õ–Ø {story.child_name.upper()}
{'='*50}

–¢–µ–º–∞: {story.theme}
–í–æ–∑—Ä–∞—Å—Ç —Ä–µ–±–µ–Ω–∫–∞: {story.child_age} –ª–µ—Ç
–ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(story.characters)}
–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {date_str}
–ú–æ—Ä–∞–ª—å: {story.moral}

{'='*50}
–¢–ï–ö–°–¢ –°–ö–ê–ó–ö–ò
{'='*50}

{story.story_text}

{'='*50}
–°–æ–∑–¥–∞–Ω–æ –±–æ—Ç–æ–º-—Å–∫–∞–∑–æ—á–Ω–∏–∫–æ–º üé≠
–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è {story.child_name} ‚ù§Ô∏è
"""
    
    # Create file
    file_bytes = file_content.encode('utf-8')
    filename = f"–°–∫–∞–∑–∫–∞_–¥–ª—è_{story.child_name}_{story.id}.txt"
    
    # Send file
    file_obj = BufferedInputFile(file_bytes, filename=filename)
    
    await callback.message.answer_document(
        file_obj,
        caption=f"üì• **–≠–∫—Å–ø–æ—Ä—Ç —Å–∫–∞–∑–∫–∏ –¥–ª—è {story.child_name}**\n\n"
                f"üéØ –¢–µ–º–∞: {story.theme}\n"
                f"üìÖ –°–æ–∑–¥–∞–Ω–∞: {date_str}\n"
                f"üìù –†–∞–∑–º–µ—Ä: {len(story.story_text)} —Å–∏–º–≤–æ–ª–æ–≤"
    )
    
    await callback.answer("‚úÖ –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")


@router.callback_query(F.data.startswith("similar_story_"))
async def create_similar_story(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Create similar story based on existing one"""
    parts = callback.data.split("_")
    child_id = int(parts[2])
    story_id = int(parts[3])
    
    story_service = StoryService(session)
    original_story = await story_service.get_story_by_id(story_id)
    
    if not original_story or original_story.user_id != current_user.id:
        await callback.answer("–°–∫–∞–∑–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    # Show progress message
    progress_message = await callback.message.edit_text(
        f"‚ú® –°–æ–∑–¥–∞—é –ø–æ—Ö–æ–∂—É—é —Å–∫–∞–∑–∫—É –Ω–∞ —Ç–µ–º—É '{original_story.theme}'...\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        # Create new story with similar theme
        new_story = await story_service.create_story(
            child_id=child_id,
            theme=original_story.theme
        )
        
        # Format new story for display
        feedback_emoji = get_feedback_emoji(new_story.child_feedback)
        date_str = new_story.created_at.strftime("%d.%m.%Y –≤ %H:%M")
        
        story_text = (
            f"üìñ **–ù–æ–≤–∞—è —Å–∫–∞–∑–∫–∞ –¥–ª—è {new_story.child_name}** {feedback_emoji}\n\n"
            f"üéØ **–¢–µ–º–∞:** {new_story.theme}\n"
            f"üé≠ **–ü–µ—Ä—Å–æ–Ω–∞–∂–∏:** {', '.join(new_story.characters[:3])}\n"
            f"üìÖ **–°–æ–∑–¥–∞–Ω–∞:** {date_str}\n"
            f"üí´ **–ú–æ—Ä–∞–ª—å:** {new_story.moral}\n\n"
            f"{'='*30}\n\n"
            f"{new_story.story_text}\n\n"
            f"{'='*30}"
        )
        
        from ..keyboards.inline import get_feedback_keyboard
        keyboard = get_feedback_keyboard(new_story.id, child_id)
        await progress_message.edit_text(story_text, reply_markup=keyboard, parse_mode="Markdown")
        
    except Exception as e:
        await progress_message.edit_text(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )


def get_feedback_emoji(feedback: str) -> str:
    """Get emoji for story feedback"""
    return {
        "loved": "üíñ",
        "liked": "üëç", 
        "disliked": "üëé",
        None: "üìñ"
    }.get(feedback, "üìñ")
