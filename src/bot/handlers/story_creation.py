"""Story creation handlers"""
import asyncio
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from ..states.story_states import StoryCreationStates
from ..keyboards.inline import get_theme_keyboard, get_feedback_keyboard
from ...services.story_service import StoryService
from ...services.child_service import ChildService
from ...services.tts_service import TTSService
from ...services.content_safety_service import content_safety, SafetyLevel
from ...models.user import User

router = Router()


@router.callback_query(F.data.startswith("new_story_"))
async def start_new_story(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """Start creating new story"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # Show theme selection based on child's interests
    keyboard = get_theme_keyboard(child_id, child.interests)
    
    await callback.message.edit_text(
        f"üé≠ –°–æ–∑–¥–∞–µ–º —Å–∫–∞–∑–∫—É –¥–ª—è {child.name}!\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏–∑ –ª—é–±–∏–º—ã—Ö –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ {child.name} "
        f"–∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–≤–æ—é:",
        reply_markup=keyboard
    )
    
    await callback.answer()


@router.callback_query(F.data.startswith("theme_"))
async def handle_theme_selection(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession,
    current_user: User
):
    """Handle theme selection for story"""
    # Answer callback immediately to prevent timeout
    await callback.answer()
    
    parts = callback.data.split("_")
    child_id = int(parts[1])
    theme = "_".join(parts[2:])  # Join back in case theme has underscores
    
    # Get child data for validation
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.message.edit_text("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if theme == "random":
        theme = None  # Will be auto-selected from interests
    else:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–º—ã –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        safety_level, message = content_safety.validate_theme(theme, child.age)
        
        if safety_level == SafetyLevel.BLOCKED:
            await callback.message.edit_text(
                f"üö´ {message}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é —Ç–µ–º—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö."
            )
            return
        
        elif safety_level == SafetyLevel.WARNING:
            # Show warning but continue
            await callback.message.edit_text(
                f"‚ö†Ô∏è {message}\n\n"
                f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞—é —Å–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏..."
            )
            await asyncio.sleep(2)  # Brief pause to show warning
    
    # Save to state for story generation
    await state.update_data(
        child_id=child_id,
        selected_theme=theme
    )
    
    # Show progress message
    import time
    progress_message = await callback.message.edit_text(
        f"üé≠ –°–æ–∑–¥–∞—é –≤–æ–ª—à–µ–±–Ω—É—é —Å–∫–∞–∑–∫—É...\n"
        f"‚ú® –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã\n\n"
        f"üîÆ –ü—Ä–∏–¥—É–º—ã–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é... {int(time.time()) % 1000}"
    )
    
    try:
        # Generate story
        print(f"üèóÔ∏è Starting story creation for child_id: {child_id}")
        story_service = StoryService(session)
        story = await story_service.create_story(
            child_id=child_id,
            theme=theme if theme != "random" else None
        )
        
        # Update progress
        print(f"üìù Story created successfully: {story.id}")
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=progress_message.message_id,
            text="üé≠ –°–∫–∞–∑–∫–∞ –≥–æ—Ç–æ–≤–∞! üéôÔ∏è –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ..."
        )
        print(f"‚úÖ Progress message updated")
        
        # Generate audio with Charlotte's voice
        print(f"üéôÔ∏è Starting TTS generation...")
        tts_service = TTSService()
        audio_buffer = await tts_service.generate_audio_for_story(
            story_text=story.story_text,
            child_name=story.child_name,
            child_age=story.child_age,
            mood="cheerful"
        )
        print(f"‚úÖ TTS result: {'Success' if audio_buffer else 'Failed'}")
        
        # Send the story
        keyboard = get_feedback_keyboard(story.id, child_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç–¥–µ–ª—å–Ω–æ
        header_message = (
            f"üìñ **–°–∫–∞–∑–∫–∞ –¥–ª—è {story.child_name}**\n\n"
            f"üéØ –¢–µ–º–∞: {story.theme}\n"
            f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(story.characters[:3])}\n"
            f"üí´ –ú–æ—Ä–∞–ª—å: {story.moral}\n\n"
            f"{'='*30}"
        )
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=header_message,
            parse_mode="Markdown"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏ (—Ä–∞–∑–±–∏–≤–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π)
        max_message_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        if len(story.story_text) <= max_message_length:
            # –ö–æ—Ä–æ—Ç–∫–∞—è —Å–∫–∞–∑–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª–∏–∫–æ–º
            await callback.bot.send_message(
                chat_id=callback.message.chat.id,
                text=story.story_text
            )
        else:
            # –î–ª–∏–Ω–Ω–∞—è —Å–∫–∞–∑–∫–∞ - —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            current_chunk = ""
            sentences = story.story_text.split('. ')
            
            for sentence in sentences:
                if len(current_chunk) + len(sentence) + 2 <= max_message_length:
                    current_chunk += sentence + '. '
                else:
                    if current_chunk:
                        chunks.append(current_chunk.strip())
                    current_chunk = sentence + '. '
            
            if current_chunk:
                chunks.append(current_chunk.strip())
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å
            for i, chunk in enumerate(chunks, 1):
                part_message = f"**–ß–∞—Å—Ç—å {i}/{len(chunks)}**\n\n{chunk}"
                await callback.bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=part_message,
                    parse_mode="Markdown"
                )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        final_message = f"{'='*30}\n\n–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ —Å–∫–∞–∑–∫–∞ {story.child_name}?"
        
        await callback.bot.send_message(
            chat_id=callback.message.chat.id,
            text=final_message,
            reply_markup=keyboard
        )
        
        # Send audio if generated successfully
        if audio_buffer:
            print(f"üéß Sending audio file...")
            audio_file = BufferedInputFile(
                audio_buffer.read(),
                filename=f"story_{story.id}_{story.child_name}.mp3"
            )
            
            await callback.bot.send_audio(
                chat_id=callback.message.chat.id,
                audio=audio_file,
                title=f"–°–∫–∞–∑–∫–∞ –¥–ª—è {story.child_name}",
                performer="Charlotte - –°–∫–∞–∑–æ—á–Ω–∏—Ü–∞",
                caption=f"üéß –ê—É–¥–∏–æ–≤–µ—Ä—Å–∏—è —Å–∫–∞–∑–∫–∏ '{story.theme}' –¥–ª—è {story.child_name}"
            )
            print(f"‚úÖ Audio sent successfully!")
        else:
            print(f"‚ùå No audio to send")
        
        # Delete progress message
        await callback.bot.delete_message(
            chat_id=callback.message.chat.id,
            message_id=progress_message.message_id
        )
        
        # Update user's free stories counter
        from ...services.user_service import UserService
        user_service = UserService(session)
        await user_service.use_free_story(current_user.id)
        
    except Exception as e:
        print(f"üí• CRITICAL ERROR in story creation: {e}")
        print(f"üí• Error type: {type(e)}")
        import traceback
        print(f"üí• Full traceback: {traceback.format_exc()}")
        await callback.bot.edit_message_text(
            chat_id=callback.message.chat.id,
            message_id=progress_message.message_id,
            text=f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏:\n{str(e)}\n\n"
                 "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
    
    await callback.answer()


@router.callback_query(F.data.startswith("custom_theme_"))
async def start_custom_theme(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start custom theme input"""
    # Answer callback immediately to prevent timeout
    await callback.answer()
    
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    
    await callback.message.edit_text(
        "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ—é —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏:\n\n"
        "üí° –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –≤ –∫–æ—Å–º–æ—Å\n"
        "‚Ä¢ –ü–æ–¥–≤–æ–¥–Ω–æ–µ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ\n"
        "‚Ä¢ –í–æ–ª—à–µ–±–Ω—ã–π –ª–µ—Å\n"
        "‚Ä¢ –î–µ–Ω—å –≤ —Ü–∏—Ä–∫–µ\n\n"
        "–û–ø–∏—à–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤ —Å–∫–∞–∑–∫–µ:"
    )
    
    await state.set_state(StoryCreationStates.custom_theme_input)


@router.message(StateFilter(StoryCreationStates.custom_theme_input))
async def handle_custom_theme(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    current_user: User
):
    """Handle custom theme input"""
    custom_theme = message.text.strip()
    
    if not custom_theme:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏–µ –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –ª–µ—Å—É'"
        )
        return
    
    data = await state.get_data()
    child_id = data.get("child_id")
    
    if not child_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω —Ä–µ–±–µ–Ω–æ–∫. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /story")
        await state.clear()
        return
    
    # Show progress
    progress_message = await message.answer(
        f"üé≠ –°–æ–∑–¥–∞—é —Å–∫–∞–∑–∫—É –Ω–∞ —Ç–µ–º—É: '{custom_theme}'...\n"
        "‚ú® –≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ –º–∏–Ω—É—Ç—ã\n\n"
        "üîÆ –ü—Ä–∏–¥—É–º—ã–≤–∞—é –∏—Å—Ç–æ—Ä–∏—é..."
    )
    
    try:
        # Generate story with custom theme
        story_service = StoryService(session)
        story = await story_service.create_story(
            child_id=child_id,
            custom_theme=custom_theme
        )
        
        # Update progress
        await progress_message.edit_text("üé≠ –°–∫–∞–∑–∫–∞ –≥–æ—Ç–æ–≤–∞! üéôÔ∏è –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ...")
        
        # Generate audio with Charlotte's voice - TEMPORARILY DISABLED  
        print(f"üéôÔ∏è [CUSTOM] TTS generation temporarily disabled for debugging")
        audio_buffer = None  # Temporarily disabled
        
        # Send the story
        keyboard = get_feedback_keyboard(story.id, child_id)
        
        story_message = (
            f"üìñ **–°–∫–∞–∑–∫–∞ –¥–ª—è {story.child_name}**\n\n"
            f"üéØ –¢–µ–º–∞: {story.theme}\n"
            f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(story.characters[:3])}\n"
            f"üí´ –ú–æ—Ä–∞–ª—å: {story.moral}\n\n"
            f"{'='*30}\n\n"
            f"{story.story_text}\n\n"
            f"{'='*30}\n\n"
            f"–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ —Å–∫–∞–∑–∫–∞ {story.child_name}?"
        )
        
        await message.answer(
            story_message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # Delete progress message
        await progress_message.delete()
        
        # Update user's free stories counter
        from ...services.user_service import UserService
        user_service = UserService(session)
        await user_service.use_free_story(current_user.id)
        
        # Clear state
        await state.clear()
        
    except Exception as e:
        await progress_message.edit_text(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        await state.clear()


@router.callback_query(F.data.startswith("custom_theme_"))
async def handle_custom_theme_request(
    callback: CallbackQuery,
    state: FSMContext
):
    """Handle custom theme request"""
    # Answer callback immediately to prevent timeout
    await callback.answer()
    
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(StoryCreationStates.awaiting_custom_theme)
    
    await callback.message.edit_text(
        "‚úèÔ∏è **–°–æ–∑–¥–∞–Ω–∏–µ —Å–∫–∞–∑–∫–∏ –Ω–∞ —Å–≤–æ—é —Ç–µ–º—É**\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Å–∫–∞–∑–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–ø—Ä–æ –¥—Ä–∞–∫–æ–Ω–∞ –∏ –∑–∞–º–æ–∫' –∏–ª–∏ '–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏ –≤ –ª–µ—Å'):\n\n"
        "üí° –ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ–ø–∏—à–µ—Ç–µ —Ç–µ–º—É, —Ç–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –ø–æ–ª—É—á–∏—Ç—Å—è —Å–∫–∞–∑–∫–∞!"
    )


@router.message(StateFilter(StoryCreationStates.awaiting_custom_theme))
async def handle_custom_theme_input(
    message: Message,
    state: FSMContext,
    session: AsyncSession,
    current_user: User
):
    """Handle custom theme input and create story"""
    data = await state.get_data()
    child_id = data.get("child_id")
    custom_theme = message.text.strip()
    
    if not custom_theme:
        await message.answer("‚ùå –¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç–µ–º—É —Å–∫–∞–∑–∫–∏:")
        return
    
    if len(custom_theme) < 3:
        await message.answer("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. –û–ø–∏—à–∏—Ç–µ —Ç–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ:")
        return
    
    if len(custom_theme) > 200:
        await message.answer("‚ùå –¢–µ–º–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –°–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ:")
        return
    
    # Get child details
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child or child.user_id != current_user.id:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ /start")
        await state.clear()
        return
    
    # Show progress message
    progress_message = await message.answer(
        f"‚ú® –°–æ–∑–¥–∞—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Å–∫–∞–∑–∫—É –¥–ª—è {child.name}...\n"
        f"üéØ –¢–µ–º–∞: {custom_theme}\n\n"
        f"‚è≥ –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    try:
        # Generate story with custom theme
        from ...services.openai_service import OpenAIService
        openai_service = OpenAIService()
        story_data = await openai_service.generate_story(child, custom_theme=custom_theme)
        
        # Save story
        story_service = StoryService(session)
        story = await story_service.create_story(
            user_id=current_user.id,
            child_id=child_id,
            child_name=child.name,
            child_age=child.age,
            theme=custom_theme,
            characters=child.favorite_characters,
            story_text=story_data["story_text"],
            moral=story_data["moral"],
            tokens_used=story_data.get("tokens_used", 0),
            generation_time=story_data.get("generation_time", 0.0)
        )
        
        # Create feedback keyboard
        keyboard = get_feedback_keyboard(story.id, child_id)
        
        story_message = (
            f"üìñ **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∞–∑–∫–∞ –¥–ª—è {story.child_name}**\n\n"
            f"üéØ –¢–µ–º–∞: {story.theme}\n"
            f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(story.characters[:3])}\n"
            f"üí´ –ú–æ—Ä–∞–ª—å: {story.moral}\n\n"
            f"{'='*30}\n\n"
            f"{story.story_text}\n\n"
            f"{'='*30}\n\n"
            f"–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ª–∏ —Å–∫–∞–∑–∫–∞ {story.child_name}?"
        )
        
        await message.answer(
            story_message,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        # Delete progress message
        await progress_message.delete()
        
        # Update user's free stories counter
        from ...services.user_service import UserService
        user_service = UserService(session)
        await user_service.use_free_story(current_user.id)
        
        # Clear state
        await state.clear()
        
    except Exception as e:
        await progress_message.edit_text(
            f"üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫–∞–∑–∫–∏:\n{str(e)}\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
        )
        await state.clear()


@router.callback_query(F.data.startswith("feedback_"))
async def handle_story_feedback(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Handle story feedback"""
    parts = callback.data.split("_")
    story_id = int(parts[1])
    feedback = parts[2]
    
    story_service = StoryService(session)
    success = await story_service.update_story_feedback(story_id, feedback)
    
    if success:
        feedback_messages = {
            'loved': "ü•∞ –£—Ä–∞! –†–∞–¥, —á—Ç–æ —Å–∫–∞–∑–∫–∞ —Ç–∞–∫ –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å!",
            'liked': "üòä –ó–¥–æ—Ä–æ–≤–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!",
            'neutral': "üòê –ü–æ–Ω—è—Ç–Ω–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –ø–æ–ø—Ä–æ–±—É—é –ª—É—á—à–µ!",
            'disliked': "üòî –ñ–∞–ª—å... –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ —Å–¥–µ–ª–∞—é –ª—É—á—à–µ!"
        }
        
        await callback.answer(
            feedback_messages.get(feedback, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!"),
            show_alert=True
        )
        
        # Update keyboard to show only "new story" option
        from ..keyboards.inline import get_story_type_keyboard
        story = await story_service.get_story_by_id(story_id)
        if story:
            keyboard = get_story_type_keyboard(story.child_id)
            
            try:
                await callback.message.edit_reply_markup(reply_markup=keyboard)
            except:
                pass  # Message might be too old to edit
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–∞", show_alert=True)




@router.callback_query(F.data.startswith("edit_profile_"))
async def handle_edit_profile(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Handle profile editing request (placeholder)"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    profile_text = (
        f"‚öôÔ∏è –ü—Ä–æ—Ñ–∏–ª—å {child.name}:\n\n"
        f"üë∂ –ò–º—è: {child.name}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {child.age} –ª–µ—Ç\n"
        f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(child.favorite_characters)}\n"
        f"üí´ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(child.interests)}\n"
        f"‚è±Ô∏è –î–ª–∏–Ω–∞ —Å–∫–∞–∑–æ–∫: {child.preferred_story_length} –º–∏–Ω\n\n"
        f"üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π —Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ!"
    )
    
    await callback.message.edit_text(profile_text)
    await callback.answer()
