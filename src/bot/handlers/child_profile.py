"""Child profile management handlers"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter, Command
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from ..states.story_states import StoryCreationStates, ProfileStates
from ..keyboards.inline import get_children_keyboard, get_story_type_keyboard
from ...services.child_service import ChildService
from ...services.content_safety_service import content_safety, SafetyLevel
from ...models.user import User

router = Router()


@router.callback_query(F.data == "add_new_child")
async def start_child_creation(
    callback: CallbackQuery, 
    state: FSMContext,
    session: AsyncSession
):
    """Start child profile creation"""
    await callback.message.edit_text(
        "üë∂ –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞!\n\n"
        "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞? üíù"
    )
    await state.set_state(StoryCreationStates.awaiting_child_name)
    await callback.answer()


# Alternative direct command for testing
@router.message(Command("add_child"))
async def add_child_command(
    message: Message,
    state: FSMContext
):
    """Direct command to add child (for testing)"""
    await message.answer(
        "üë∂ –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ä–µ–±–µ–Ω–∫–∞!\n\n"
        "–ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞? üíù"
    )
    await state.set_state(StoryCreationStates.awaiting_child_name)


@router.message(StateFilter(StoryCreationStates.awaiting_child_name))
async def handle_child_name(
    message: Message, 
    state: FSMContext,
    session: AsyncSession
):
    """Handle child name input"""
    child_name = message.text.strip()
    
    # Validation
    if not child_name:
        await message.answer(
            "‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è —Ä–µ–±–µ–Ω–∫–∞:"
        )
        return
    
    if len(child_name) > 50:
        await message.answer(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è:"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –Ω–∞ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
        safety_level, violations = content_safety.validate_input(child_name, 5)  # Default age for validation
        
        if safety_level == SafetyLevel.BLOCKED:
            alternatives = content_safety.get_safe_alternatives("name", 5)
            alt_text = f"\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: {', '.join(alternatives[:3])}" if alternatives else "\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ: –ê–Ω–Ω–∞, –ú–∞–∫—Å–∏–º, –°–æ—Ñ–∏—è"
            
            await message.answer(
                f"üö´ –ò–º—è '{child_name}' —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç.\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.{alt_text}"
            )
            return
    except Exception as e:
        logger.error(f"Error validating child name: {e}")
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    
    # Save to state
    await state.update_data(child_name=child_name)
    
    await message.answer(
        f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! {child_name} - –∫—Ä–∞—Å–∏–≤–æ–µ –∏–º—è! üòä\n\n"
        f"–°–∫–æ–ª—å–∫–æ –ª–µ—Ç {child_name}?\n"
        "(–≤–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 2 –¥–æ 8 –ª–µ—Ç)"
    )
    await state.set_state(StoryCreationStates.awaiting_child_age)


@router.message(StateFilter(StoryCreationStates.awaiting_child_age))
async def handle_child_age(
    message: Message, 
    state: FSMContext,
    session: AsyncSession
):
    """Handle child age input"""
    try:
        age = int(message.text.strip())
        
        if not 2 <= age <= 8:
            await message.answer(
                "‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 8 –ª–µ—Ç.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç:"
            )
            return
        
        # Save to state
        await state.update_data(child_age=age)
        
        data = await state.get_data()
        child_name = data['child_name']
        
        await message.answer(
            f"–û—Ç–ª–∏—á–Ω–æ! üéà\n\n"
            f"–¢–µ–ø–µ—Ä—å —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫—Ç–æ –ª—é–±–∏–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ {child_name}?\n\n"
            f"üí° –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
            f"‚Ä¢ –µ–¥–∏–Ω–æ—Ä–æ–≥–∏, –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã\n"
            f"‚Ä¢ —Å—É–ø–µ—Ä–≥–µ—Ä–æ–∏, —Ä–æ–±–æ—Ç—ã\n"
            f"‚Ä¢ –¥–∏–Ω–æ–∑–∞–≤—Ä—ã, –¥—Ä–∞–∫–æ–Ω—ã\n"
            f"‚Ä¢ –∂–∏–≤–æ—Ç–Ω—ã–µ, –≤–æ–ª—à–µ–±–Ω–∏–∫–∏\n\n"
            f"–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )
        await state.set_state(StoryCreationStates.awaiting_characters)
        
    except ValueError:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç —Ü–∏—Ñ—Ä–æ–π.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 5"
        )


@router.message(StateFilter(StoryCreationStates.awaiting_characters))
async def handle_child_characters(
    message: Message, 
    state: FSMContext,
    session: AsyncSession
):
    """Handle child favorite characters input"""
    characters_text = message.text.strip()
    
    if not characters_text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –µ–¥–∏–Ω–æ—Ä–æ–≥–∏, –ø—Ä–∏–Ω—Ü–µ—Å—Å—ã"
        )
        return
    
    # Parse characters
    characters = [char.strip() for char in characters_text.split(',') if char.strip()]
    
    if not characters:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    try:
        child_service = ChildService(session)
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∏–º –∏–∑ state)
        data = await state.get_data()
        child_age = data.get('child_age', 5)  # Default age for validation
        
        safety_level, problematic_chars = content_safety.validate_characters(characters, child_age)
        
        if safety_level == SafetyLevel.BLOCKED:
            alternatives = content_safety.get_safe_alternatives(problematic_chars[0], child_age)
            alt_text = f"\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ: {', '.join(alternatives)}" if alternatives else ""
            
            await message.answer(
                f"üö´ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –¥–µ—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {', '.join(problematic_chars)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.{alt_text}"
            )
            return
    except ValueError as e:
        await message.answer(f"üö´ {str(e)}")
        return
    
    # Save to state
    await state.update_data(characters=characters)
    
    data = await state.get_data()
    child_name = data['child_name']
    
    characters_list = '\n'.join([f"‚Ä¢ {char}" for char in characters[:5]])
    
    await message.answer(
        f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä! üåü\n\n"
        f"–õ—é–±–∏–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏ {child_name}:\n"
        f"{characters_list}\n\n"
        f"–ê —á—Ç–æ –µ—â–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ {child_name}?\n\n"
        f"üí° –ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        f"‚Ä¢ –∫–æ—Å–º–æ—Å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è\n"
        f"‚Ä¢ –∂–∏–≤–æ—Ç–Ω—ã–µ, –ø—Ä–∏—Ä–æ–¥–∞\n"
        f"‚Ä¢ –º–∞–≥–∏—è, –≤–æ–ª—à–µ–±—Å—Ç–≤–æ\n"
        f"‚Ä¢ —Å–ø–æ—Ä—Ç, –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è\n\n"
        f"–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
    )
    await state.set_state(StoryCreationStates.awaiting_interests)


@router.message(StateFilter(StoryCreationStates.awaiting_interests))
async def handle_child_interests(
    message: Message, 
    state: FSMContext,
    session: AsyncSession,
    current_user: User
):
    """Handle child interests and create profile"""
    interests_text = message.text.strip()
    
    if not interests_text:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å.\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–æ—Å–º–æ—Å, –∂–∏–≤–æ—Ç–Ω—ã–µ"
        )
        return
    
    # Parse interests
    interests = [interest.strip() for interest in interests_text.split(',') if interest.strip()]
    
    if not interests:
        await message.answer(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—ã.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—á–∏—Å–ª–∏—Ç–µ –∏—Ö —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –Ω–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    try:
        child_service = ChildService(session)
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ (–≤–æ–∑—Ä–∞—Å—Ç –ø–æ–ª—É—á–∏–º –∏–∑ state)
        data = await state.get_data()
        child_age = data.get('child_age', 5)  # Default age for validation
        
        safety_level, problematic_interests = content_safety.validate_interests(interests, child_age)
        
        if safety_level == SafetyLevel.BLOCKED:
            alternatives = content_safety.get_safe_alternatives(problematic_interests[0], child_age)
            alt_text = f"\n\nüí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ: {', '.join(alternatives)}" if alternatives else ""
            
            await message.answer(
                f"üö´ –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ–¥–µ—Ä–∂–∞—Ç –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–ª—è –¥–µ—Ç–µ–π –∫–æ–Ω—Ç–µ–Ω—Ç: {', '.join(problematic_interests)}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã.{alt_text}"
            )
            return
    except ValueError as e:
        await message.answer(f"üö´ {str(e)}")
        return
    
    # Get data from state
    data = await state.get_data()
    child_name = data['child_name']
    child_age = data['child_age']
    characters = data['characters']
    
    try:
        # Create child profile
        child_service = ChildService(session)
        child = await child_service.create_child_profile(
            user_id=current_user.id,
            name=child_name,
            age=child_age,
            characters=characters,
            interests=interests
        )
        
        # Show success message with options
        keyboard = get_story_type_keyboard(child.id)
        
        characters_text = ', '.join(characters[:3])
        if len(characters) > 3:
            characters_text += f" –∏ –µ—â–µ {len(characters) - 3}"
        
        interests_text = ', '.join(interests[:3])
        if len(interests) > 3:
            interests_text += f" –∏ –µ—â–µ {len(interests) - 3}"
        
        await message.answer(
            f"üéâ –ü—Ä–æ—Ñ–∏–ª—å {child_name} —Å–æ–∑–¥–∞–Ω!\n\n"
            f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n"
            f"üë∂ –ò–º—è: {child_name}\n"
            f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {child_age} –ª–µ—Ç\n"
            f"üé≠ –õ—é–±–∏–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {characters_text}\n"
            f"üí´ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {interests_text}\n\n"
            f"–ß—Ç–æ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å?",
            reply_markup=keyboard
        )
        
        # Clear state
        await state.clear()
        
    except ValueError as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await state.clear()
    except Exception as e:
        await message.answer(
            "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –∫–æ–º–∞–Ω–¥—ã /story"
        )
        await state.clear()


@router.callback_query(F.data.regexp(r"^child_\d+$"))
async def handle_child_selection(
    callback: CallbackQuery,
    state: FSMContext,
    session: AsyncSession
):
    """Handle child selection from list"""
    child_id = int(callback.data.split("_")[1])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –†–µ–±–µ–Ω–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # Show child options
    keyboard = get_story_type_keyboard(child_id)
    
    await callback.message.edit_text(
        f"üë∂ –í—ã–±—Ä–∞–Ω: {child.name} ({child.age} –ª–µ—Ç)\n\n"
        f"üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(child.favorite_characters[:3])}\n"
        f"üí´ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(child.interests[:3])}\n\n"
        f"–ß—Ç–æ –±—É–¥–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å?",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "back_to_children")
async def back_to_children_list(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Go back to children selection"""
    child_service = ChildService(session)
    children = await child_service.get_user_children(current_user.id)
    
    if not children:
        await callback.message.edit_text(
            "üë∂ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–µ—Ç–µ–π.\n"
            "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø–µ—Ä–≤—ã–π! –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à–µ–≥–æ –º–∞–ª—ã—à–∞?"
        )
        return
    
    keyboard = get_children_keyboard(children)
    await callback.message.edit_text(
        "üë∂ –î–ª—è –∫–æ–≥–æ —Å–æ–∑–¥–∞–µ–º —Å–∫–∞–∑–∫—É?",
        reply_markup=keyboard
    )
    await callback.answer()
