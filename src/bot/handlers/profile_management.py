"""Profile management handlers"""
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from ..states.profile_states import ProfileEditStates
from ..keyboards.inline import (
    get_profile_management_keyboard, 
    get_profile_actions_keyboard,
    get_edit_profile_keyboard,
    get_confirm_keyboard
)
from ...services.child_service import ChildService
from ...models import User
import re

router = Router()


@router.callback_query(F.data == "back_to_profiles")
async def back_to_profiles_handler(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Handle back to profiles action"""
    child_service = ChildService(session)
    children = await child_service.get_user_children(current_user.id)
    
    keyboard = get_profile_management_keyboard(children)
    
    await callback.message.edit_text(
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–µ—Ç–µ–π**\n\n"
        f"–£ –≤–∞—Å {len(children)} –ø—Ä–æ—Ñ–∏–ª{'—å' if len(children) == 1 else ('—è' if len(children) < 5 else '–µ–π')}.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–±–µ–Ω–∫–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("manage_profile_"))
async def manage_profile_handler(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Handle profile management for specific child"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # Get child statistics
    stats = await child_service.get_child_statistics(child_id)
    
    stats_text = (
        f"üë∂ **{child.name}** ({child.age} –ª–µ—Ç)\n\n"
        f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
        f"‚Ä¢ –°–∫–∞–∑–æ–∫ —Å–æ–∑–¥–∞–Ω–æ: {stats['story_count']}\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(child.favorite_characters[:3]) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(child.interests[:3]) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ —Å–∫–∞–∑–æ–∫: {child.preferred_story_length} –º–∏–Ω\n\n"
        "**–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?**"
    )
    
    keyboard = get_profile_actions_keyboard(child_id)
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("profile_stats_"))
async def profile_stats_handler(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Show detailed profile statistics"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    stats = await child_service.get_child_statistics(child_id)
    
    if not stats:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # Format top themes
    top_themes_text = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã"
    if stats['top_themes']:
        top_themes_text = "\n".join([f"   ‚Ä¢ {theme} ({count} —Ä–∞–∑)" for theme, count in stats['top_themes']])
    
    stats_text = (
        f"üìä **–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {stats['name']}**\n\n"
        f"üë∂ **–ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
        f"‚Ä¢ –ò–º—è: {stats['name']}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {stats['age']} –ª–µ—Ç\n"
        f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω: {stats['created_at'].strftime('%d.%m.%Y')}\n\n"
        f"üìö **–°–∫–∞–∑–∫–∏:**\n"
        f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {stats['story_count']}\n"
        f"‚Ä¢ –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã:\n{top_themes_text}\n\n"
        f"üé≠ **–ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:**\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(stats['favorite_characters']) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(stats['interests']) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ —Å–∫–∞–∑–æ–∫: {stats['preferred_story_length']} –º–∏–Ω"
    )
    
    keyboard = get_profile_actions_keyboard(child_id)
    
    await callback.message.edit_text(stats_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_profile_"))
async def edit_profile_handler(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Show profile editing options"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    edit_text = (
        f"‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è {child.name}**\n\n"
        f"**–¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ:**\n"
        f"‚Ä¢ –ò–º—è: {child.name}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {child.age} –ª–µ—Ç\n"
        f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏: {', '.join(child.favorite_characters) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(child.interests) or '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
        f"‚Ä¢ –î–ª–∏–Ω–∞ —Å–∫–∞–∑–æ–∫: {child.preferred_story_length} –º–∏–Ω\n\n"
        "**–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?**"
    )
    
    keyboard = get_edit_profile_keyboard(child_id)
    
    await callback.message.edit_text(edit_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("edit_name_"))
async def edit_name_handler(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start name editing process"""
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(ProfileEditStates.awaiting_new_name)
    
    await callback.message.edit_text(
        "üìù **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞:"
    )
    await callback.answer()


@router.message(StateFilter(ProfileEditStates.awaiting_new_name))
async def process_new_name(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """Process new name input"""
    data = await state.get_data()
    child_id = data.get("child_id")
    
    new_name = message.text.strip()
    
    if not new_name or len(new_name) < 2:
        await message.answer("‚ùå –ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    if len(new_name) > 50:
        await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    child_service = ChildService(session)
    success = await child_service.update_child_name(child_id, new_name)
    
    if success:
        await message.answer(
            f"‚úÖ –ò–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ **{new_name}**!",
            reply_markup=get_profile_actions_keyboard(child_id)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_age_"))
async def edit_age_handler(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start age editing process"""
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(ProfileEditStates.awaiting_new_age)
    
    await callback.message.edit_text(
        "üéÇ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤–æ–∑—Ä–∞—Å—Ç–∞**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 2 –¥–æ 8 –ª–µ—Ç):"
    )
    await callback.answer()


@router.message(StateFilter(ProfileEditStates.awaiting_new_age))
async def process_new_age(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """Process new age input"""
    data = await state.get_data()
    child_id = data.get("child_id")
    
    try:
        new_age = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 2 –¥–æ 8:")
        return
    
    child_service = ChildService(session)
    success = await child_service.update_child_age(child_id, new_age)
    
    if success:
        await message.answer(
            f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ **{new_age} –ª–µ—Ç**!",
            reply_markup=get_profile_actions_keyboard(child_id)
        )
    else:
        await message.answer("‚ùå –í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 2 –¥–æ 8 –ª–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_characters_"))
async def edit_characters_handler(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start characters editing process"""
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(ProfileEditStates.awaiting_new_characters)
    
    await callback.message.edit_text(
        "üé≠ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –ª—é–±–∏–º—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "*(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–Ω—Ü–µ—Å—Å–∞, –¥—Ä–∞–∫–æ–Ω, –µ–¥–∏–Ω–æ—Ä–æ–≥)*"
    )
    await callback.answer()


@router.message(StateFilter(ProfileEditStates.awaiting_new_characters))
async def process_new_characters(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """Process new characters input"""
    data = await state.get_data()
    child_id = data.get("child_id")
    
    characters_text = message.text.strip()
    characters = [char.strip() for char in characters_text.split(',') if char.strip()]
    
    if not characters:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞:")
        return
    
    child_service = ChildService(session)
    success = await child_service.update_child_characters(child_id, characters)
    
    if success:
        await message.answer(
            f"‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            f"**–ù–æ–≤—ã–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∏:** {', '.join(characters[:5])}",
            reply_markup=get_profile_actions_keyboard(child_id)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_interests_"))
async def edit_interests_handler(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start interests editing process"""
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(ProfileEditStates.awaiting_new_interests)
    
    await callback.message.edit_text(
        "üí´ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã —Ä–µ–±–µ–Ω–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é:\n"
        "*(–Ω–∞–ø—Ä–∏–º–µ—Ä: –∂–∏–≤–æ—Ç–Ω—ã–µ, –∫–æ—Å–º–æ—Å, —Å–ø–æ—Ä—Ç)*"
    )
    await callback.answer()


@router.message(StateFilter(ProfileEditStates.awaiting_new_interests))
async def process_new_interests(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """Process new interests input"""
    data = await state.get_data()
    child_id = data.get("child_id")
    
    interests_text = message.text.strip()
    interests = [interest.strip() for interest in interests_text.split(',') if interest.strip()]
    
    if not interests:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∏–Ω—Ç–µ—Ä–µ—Å:")
        return
    
    child_service = ChildService(session)
    success = await child_service.update_child_interests(child_id, interests)
    
    if success:
        await message.answer(
            f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
            f"**–ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã:** {', '.join(interests[:5])}",
            reply_markup=get_profile_actions_keyboard(child_id)
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    await state.clear()


@router.callback_query(F.data.startswith("edit_length_"))
async def edit_length_handler(
    callback: CallbackQuery,
    state: FSMContext
):
    """Start story length editing process"""
    child_id = int(callback.data.split("_")[2])
    
    await state.update_data(child_id=child_id)
    await state.set_state(ProfileEditStates.awaiting_new_length)
    
    await callback.message.edit_text(
        "‚è±Ô∏è **–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏–Ω—ã —Å–∫–∞–∑–æ–∫**\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–ª–∏–Ω—É —Å–∫–∞–∑–æ–∫ –≤ –º–∏–Ω—É—Ç–∞—Ö (–æ—Ç 1 –¥–æ 10):\n\n"
        "üí° **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**\n"
        "‚Ä¢ 2-3 –º–∏–Ω - –¥–ª—è –º–∞–ª—ã—à–µ–π 2-4 –≥–æ–¥–∞\n"
        "‚Ä¢ 5-7 –º–∏–Ω - –¥–ª—è –¥–æ—à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 5-6 –ª–µ—Ç\n"
        "‚Ä¢ 8-10 –º–∏–Ω - –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ 7-8 –ª–µ—Ç"
    )
    await callback.answer()


@router.message(StateFilter(ProfileEditStates.awaiting_new_length))
async def process_new_length(
    message: Message,
    state: FSMContext,
    session: AsyncSession
):
    """Process new story length input"""
    data = await state.get_data()
    child_id = data.get("child_id")
    
    try:
        new_length = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10:")
        return
    
    child_service = ChildService(session)
    success = await child_service.update_child_story_length(child_id, new_length)
    
    if success:
        await message.answer(
            f"‚úÖ –î–ª–∏–Ω–∞ —Å–∫–∞–∑–æ–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ **{new_length} –º–∏–Ω—É—Ç**!",
            reply_markup=get_profile_actions_keyboard(child_id)
        )
    else:
        await message.answer("‚ùå –î–ª–∏–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10 –º–∏–Ω—É—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    await state.clear()


@router.callback_query(F.data.startswith("deactivate_profile_"))
async def deactivate_profile_handler(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Show deactivation confirmation"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    confirm_text = (
        f"‚ö†Ô∏è **–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å **{child.name}**?\n\n"
        f"–ü–æ—Å–ª–µ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏:\n"
        f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –∏–∑ —Å–ø–∏—Å–∫–∞\n"
        f"‚Ä¢ –ù–µ–ª—å–∑—è –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Å–∫–∞–∑–∫–∏\n"
        f"‚Ä¢ –°—Ç–∞—Ä—ã–µ —Å–∫–∞–∑–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è\n"
        f"‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
    )
    
    keyboard = get_confirm_keyboard("deactivate", str(child_id))
    
    await callback.message.edit_text(confirm_text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data.startswith("confirm_deactivate_"))
async def confirm_deactivate_handler(
    callback: CallbackQuery,
    session: AsyncSession,
    current_user: User
):
    """Confirm profile deactivation"""
    child_id = int(callback.data.split("_")[2])
    
    child_service = ChildService(session)
    child = await child_service.get_child_by_id(child_id)
    
    if not child:
        await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    success = await child_service.deactivate_child(child_id)
    
    if success:
        # Return to profiles list
        children = await child_service.get_user_children(current_user.id)
        keyboard = get_profile_management_keyboard(children)
        
        await callback.message.edit_text(
            f"‚úÖ –ü—Ä–æ—Ñ–∏–ª—å **{child.name}** —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n\n"
            "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏ –¥–µ—Ç–µ–π**\n\n"
            f"–£ –≤–∞—Å {len(children)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª{'—å' if len(children) == 1 else ('—è' if len(children) < 5 else '–µ–π')}.",
            reply_markup=keyboard
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)
    
    await callback.answer()


@router.callback_query(F.data.startswith("cancel_"))
async def cancel_action_handler(
    callback: CallbackQuery,
    session: AsyncSession
):
    """Cancel any confirmation action"""
    # Extract child_id if present in the context
    await callback.message.edit_text(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /profile –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è–º–∏."
    )
    await callback.answer()
